package solutions

import java.util.*

/*
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/
class EulerQuestion012 {
    fun execute12(): Int {
        var index = 1
        var triangleNumber = 1
        while (getNumberOfDivisorsFast(triangleNumber) < 500) {
            index++
            triangleNumber += index
        }
        println(triangleNumber)
        return triangleNumber
    }

    private fun getNumberOfDivisorsFast(input: Int): Int {
        val primeFactors = primeFactorise(input)
        return countOccurrencesOfIntegers(primeFactors)
                .map { it + 1 }
                .reduce { acc, i -> acc * i}
    }

    /**
     * Returns a count of each integer in the given list in the format:
     * (value, count)
     */
    private fun countOccurrencesOfIntegers(integers: List<Int>): List<Int> {
        return integers.groupBy { it }.map { it.value.size }
    }

    // gets all the prime factors including duplicates
    private fun primeFactorise(input: Int): LinkedList<Int> {
        val primeFactors = LinkedList<Int>()
        var currentIteration = input
        var previousPrime = 2
        do {
            if (currentIteration % previousPrime == 0) {
                primeFactors.add(previousPrime)
                currentIteration /= previousPrime
            } else {
                do {
                    previousPrime++
                } while (!isPrime(previousPrime))
            }
        } while (!isPrime(currentIteration))
        primeFactors.add(currentIteration)
        return primeFactors
    }

    private fun isPrime(input: Int): Boolean {
        var isPrime = true
        var i = 2
        while (i <= input / 2 && isPrime) {
            if (input % i == 0) {
                isPrime = false
            }
            i++
        }
        return isPrime
    }

}
